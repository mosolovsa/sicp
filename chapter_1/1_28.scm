; a = 2^s*d, a % 2 = 1

(define (get-s n)
    (if (= (remainder n 2) 1)
        0
        (+ 1 (get-s (/ n 2)))
))

(define (get-d n s)
    (/ n (expt 2 s))
)

(define (full-test-prime number)
    (define s (get-s (- number 1)))
    (define d (get-d (- number 1) s))

    ; #t - prime #f - composite
    (define (miler-rabin a s d n)
;        (display "miler-rabin a: ")
;        (display a)
;        (display " s: ")
;        (display s)
;        (display " d: ")
;        (display d)
;        (display " ")
;        (display n)
;        (newline)
        (define (test-r r)
            (define y (expt a (* (expt 2 r) d)))
;            (display "test-r ")
;            (display y)
;            (display " ")
;            (display r)
;            (newline)
            (if (= (remainder y n) (- n 1))
                #t
                (if (< r s) (test-r (+ r 1)) #f)
            )
        )
        (if (= (remainder (expt a d) n) 1)
            #t
            (test-r 0))
    )

    (define (test-all-a i)
;        (display "test-all-a ")
;        (display i)
;        (newline)
        (if (< i number)
            (if (miler-rabin i s d number)
                (test-all-a (+ i 1))
                #f)
            #t)
    )

    (test-all-a 1)
)

; 561, 1105, 1729, 2465, 2821 and 6601
(full-test-prime 3)
(full-test-prime 4)
(full-test-prime 61)
(full-test-prime 63)
(full-test-prime 67)
(full-test-prime 561)
(full-test-prime 1105)
(full-test-prime 1729)
(full-test-prime 2465)
(full-test-prime 2821)
(full-test-prime 6601)
